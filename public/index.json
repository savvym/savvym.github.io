[{"categories":["Paper Read"],"content":" Autonomous_driving_application_Car_detection pre { line-height: 125%; } td.linenos .normal { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; } span.linenos { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; } td.linenos .special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; } span.linenos.special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; } .highlight .hll { background-color: var(--jp-cell-editor-active-background) } .highlight { background: var(--jp-cell-editor-background); color: var(--jp-mirror-editor-variable-color) } .highlight .c { color: var(--jp-mirror-editor-comment-color); font-style: italic } /* Comment */ .highlight .err { color: var(--jp-mirror-editor-error-color) } /* Error */ .highlight .k { color: var(--jp-mirror-editor-keyword-color); font-weight: bold } /* Keyword */ .highlight .o { color: var(--jp-mirror-editor-operator-color); font-weight: bold } /* Operator */ .highlight .p { color: var(--jp-mirror-editor-punctuation-color) } /* Punctuation */ .highlight .ch { color: var(--jp-mirror-editor-comment-color); font-style: italic } /* Comment.Hashbang */ .highlight .cm { color: var(--jp-mirror-editor-comment-color); font-style: italic } /* Comment.Multiline */ .highlight .cp { color: var(--jp-mirror-editor-comment-color); font-style: italic } /* Comment.Preproc */ .highlight .cpf { color: var(--jp-mirror-editor-comment-color); font-style: italic } /* Comment.PreprocFile */ .highlight .c1 { color: var(--jp-mirror-editor-comment-color); font-style: italic } /* Comment.Single */ .highlight .cs { color: var(--jp-mirror-editor-comment-color); font-style: italic } /* Comment.Special */ .highlight .kc { color: var(--jp-mirror-editor-keyword-color); font-weight: bold } /* Keyword.Constant */ .highlight .kd { color: var(--jp-mirror-editor-keyword-color); font-weight: bold } /* Keyword.Declaration */ .highlight .kn { color: var(--jp-mirror-editor-keyword-color); font-weight: bold } /* Keyword.Namespace */ .highlight .kp { color: var(--jp-mirror-editor-keyword-color); font-weight: bold } /* Keyword.Pseudo */ .highlight .kr { color: var(--jp-mirror-editor-keyword-color); font-weight: bold } /* Keyword.Reserved */ .highlight .kt { color: var(--jp-mirror-editor-keyword-color); font-weight: bold } /* Keyword.Type */ .highlight .m { color: var(--jp-mirror-editor-number-color) } /* Literal.Number */ .highlight .s { color: var(--jp-mirror-editor-string-color) } /* Literal.String */ .highlight .ow { color: var(--jp-mirror-editor-operator-color); font-weight: bold } /* Operator.Word */ .highlight .w { color: var(--jp-mirror-editor-variable-color) } /* Text.Whitespace */ .highlight .mb { color: var(--jp-mirror-editor-number-color) } /* Literal.Number.Bin */ .highlight .mf { color: var(--jp-mirror-editor-number-color) } /* Literal.Number.Float */ .highlight .mh { color: var(--jp-mirror-editor-number-color) } /* Literal.Number.Hex */ .highlight .mi { color: var(--jp-mirror-editor-number-color) } /* Literal.Number.Integer */ .highlight .mo { color: var(--jp-mirror-editor-number-color) } /* Literal.Number.Oct */ .highlight .sa { color: var(--jp-mirror-editor-string-color) } /* Literal.String.Affix */ .highlight .sb { color: var(--jp-mirror-editor-string-color) } /* Literal.String.Backtick */ .highlight .sc { color: var(--jp-mirror-editor-string-color) } /* Literal.String.Char */ .highlight .dl { color: var(--jp-mirror-editor-string-color) } /* Literal.String.Delimiter */ .highlight .sd { color: var(--jp-mirror-editor-string-color) } /* Literal.String.Doc */ .highlight .s2 { color: var(--jp-mirror-editor-string-color) } /* Literal.String.Double */ .highlight .se { color: var(--jp-mirror-editor-string-color) } /* Literal.String.Escape */ .highlight .sh { color: var(--jp-mirror-editor-string-color) } /* Literal.String.Heredoc */ .highlight .si { color: var(--jp-mirror-editor-string-color","date":"2023-04-10","objectID":"/car_detection_with_yolo/:0:0","tags":null,"title":"Car detection with YOLO","uri":"/car_detection_with_yolo/"},{"categories":["Paper Read"],"content":"Table of Contents¶ Packages 1 - Problem Statement 2 - YOLO 2.1 - Model Details 2.2 - Filtering with a Threshold on Class Scores Exercise 1 - yolo_filter_boxes 2.3 - Non-max Suppression Exercise 2 - iou 2.4 - YOLO Non-max Suppression Exercise 3 - yolo_non_max_suppression 2.5 - Wrapping Up the Filtering Exercise 4 - yolo_eval 3 - Test YOLO Pre-trained Model on Images 3.1 - Defining Classes, Anchors and Image Shape 3.2 - Loading a Pre-trained Model 3.3 - Convert Output of the Model to Usable Bounding Box Tensors 3.4 - Filtering Boxes 3.5 - Run the YOLO on an Image 4 - Summary for YOLO 5 - References ","date":"2023-04-10","objectID":"/car_detection_with_yolo/:1:0","tags":null,"title":"Car detection with YOLO","uri":"/car_detection_with_yolo/"},{"categories":["Paper Read"],"content":"Packages¶Run the following cell to load the packages and dependencies that will come in handy as you build the object detector! In [1]: import argparse import os import matplotlib.pyplot as plt from matplotlib.pyplot import imshow import scipy.io import scipy.misc import numpy as np import pandas as pd import PIL from PIL import ImageFont, ImageDraw, Image import tensorflow as tf from tensorflow.python.framework.ops import EagerTensor from tensorflow.keras.models import load_model from yad2k.models.keras_yolo import yolo_head from yad2k.utils.utils import draw_boxes, get_colors_for_classes, scale_boxes, read_classes, read_anchors, preprocess_image %matplotlib inline ","date":"2023-04-10","objectID":"/car_detection_with_yolo/:2:0","tags":null,"title":"Car detection with YOLO","uri":"/car_detection_with_yolo/"},{"categories":["Paper Read"],"content":"1 - Problem Statement¶You are working on a self-driving car. Go you! As a critical component of this project, you'd like to first build a car detection system. To collect data, you've mounted a camera to the hood (meaning the front) of the car, which takes pictures of the road ahead every few seconds as you drive around. Pictures taken from a car-mounted camera while driving around Silicon Valley. Dataset provided by drive.ai. You've gathered all these images into a folder and labelled them by drawing bounding boxes around every car you found. Here's an example of what your bounding boxes look like: Figure 1: Definition of a box If there are 80 classes you want the object detector to recognize, you can represent the class label $c$ either as an integer from 1 to 80, or as an 80-dimensional vector (with 80 numbers) one component of which is 1, and the rest of which are 0. The video lectures used the latter representation; in this notebook, you'll use both representations, depending on which is more convenient for a particular step. In this exercise, you'll discover how YOLO (\"You Only Look Once\") performs object detection, and then apply it to car detection. Because the YOLO model is very computationally expensive to train, the pre-trained weights are already loaded for you to use. ","date":"2023-04-10","objectID":"/car_detection_with_yolo/:3:0","tags":null,"title":"Car detection with YOLO","uri":"/car_detection_with_yolo/"},{"categories":["Paper Read"],"content":"2 - YOLO¶ \"You Only Look Once\" (YOLO) is a popular algorithm because it achieves high accuracy while also being able to run in real time. This algorithm \"only looks once\" at the image in the sense that it requires only one forward propagation pass through the network to make predictions. After non-max suppression, it then outputs recognized objects together with the bounding boxes. ","date":"2023-04-10","objectID":"/car_detection_with_yolo/:4:0","tags":null,"title":"Car detection with YOLO","uri":"/car_detection_with_yolo/"},{"categories":["Paper Read"],"content":"2.1 - Model Details¶Inputs and outputs¶ The input is a batch of images, and each image has the shape (608, 608, 3) The output is a list of bounding boxes along with the recognized classes. Each bounding box is represented by 6 numbers $(p_c, b_x, b_y, b_h, b_w, c)$ as explained above. If you expand $c$ into an 80-dimensional vector, each bounding box is then represented by 85 numbers. Anchor Boxes¶ Anchor boxes are chosen by exploring the training data to choose reasonable height/width ratios that represent the different classes. For this assignment, 5 anchor boxes were chosen for you (to cover the 80 classes), and stored in the file './model_data/yolo_anchors.txt' The dimension of the encoding tensor of the second to last dimension based on the anchor boxes is $(m, n_H,n_W,anchors,classes)$. The YOLO architecture is: IMAGE (m, 608, 608, 3) -\u003e DEEP CNN -\u003e ENCODING (m, 19, 19, 5, 85). Encoding¶Let's look in greater detail at what this encoding represents. Figure 2 : Encoding architecture for YOLO If the center/midpoint of an object falls into a grid cell, that grid cell is responsible for detecting that object. Since you're using 5 anchor boxes, each of the 19 x19 cells thus encodes information about 5 boxes. Anchor boxes are defined only by their width and height. For simplicity, you'll flatten the last two dimensions of the shape (19, 19, 5, 85) encoding, so the output of the Deep CNN is (19, 19, 425). Figure 3 : Flattening the last two last dimensions Class score¶Now, for each box (of each cell) you'll compute the following element-wise product and extract a probability that the box contains a certain class. The class score is $score_{c,i} = p_{c} \\times c_{i}$: the probability that there is an object $p_{c}$ times the probability that the object is a certain class $c_{i}$. Figure 4: Find the class detected by each box Example of figure 4¶ In figure 4, let's say for box 1 (cell 1), the probability that an object exists is $p_{1}=0.60$. So there's a 60% chance that an object exists in box 1 (cell 1). The probability that the object is the class \"category 3 (a car)\" is $c_{3}=0.73$. The score for box 1 and for category \"3\" is $score_{1,3}=0.60 \\times 0.73 = 0.44$. Let's say you calculate the score for all 80 classes in box 1, and find that the score for the car class (class 3) is the maximum. So you'll assign the score 0.44 and class \"3\" to this box \"1\". Visualizing classes¶Here's one way to visualize what YOLO is predicting on an image: For each of the 19x19 grid cells, find the maximum of the probability scores (taking a max across the 80 classes, one maximum for each of the 5 anchor boxes). Color that grid cell according to what object that grid cell considers the most likely. Doing this results in this picture: Figure 5: Each one of the 19x19 grid cells is colored according to which class has the largest predicted probability in that cell. Note that this visualization isn't a core part of the YOLO algorithm itself for making predictions; it's just a nice way of visualizing an intermediate result of the algorithm. Visualizing bounding boxes¶Another way to visualize YOLO's output is to plot the bounding boxes that it outputs. Doing that results in a visualization like this: Figure 6: Each cell gives you 5 boxes. In total, the model predicts: 19x19x5 = 1805 boxes just by looking once at the image (one forward pass through the network)! Different colors denote different classes. Non-Max suppression¶In the figure above, the only boxes plotted are ones for which the model had assigned a high probability, but this is still too many boxes. You'd like to reduce the algorithm's output to a much smaller number of detected objects. To do so, you'll use non-max suppression. Specifically, you'll carry out these steps: Get rid of boxes with a low score. Meaning, the box is not very confident about detecting a class, either due to the low probability of any object, or low probability of this particular class. Select only one box when seve","date":"2023-04-10","objectID":"/car_detection_with_yolo/:4:1","tags":null,"title":"Car detection with YOLO","uri":"/car_detection_with_yolo/"},{"categories":["Paper Read"],"content":"2.2 - Filtering with a Threshold on Class Scores¶You're going to first apply a filter by thresholding, meaning you'll get rid of any box for which the class \"score\" is less than a chosen threshold. The model gives you a total of 19x19x5x85 numbers, with each box described by 85 numbers. It's convenient to rearrange the (19,19,5,85) (or (19,19,425)) dimensional tensor into the following variables: box_confidence: tensor of shape $(19, 19, 5, 1)$ containing $p_c$ (confidence probability that there's some object) for each of the 5 boxes predicted in each of the 19x19 cells. boxes: tensor of shape $(19, 19, 5, 4)$ containing the midpoint and dimensions $(b_x, b_y, b_h, b_w)$ for each of the 5 boxes in each cell. box_class_probs: tensor of shape $(19, 19, 5, 80)$ containing the \"class probabilities\" $(c_1, c_2, ... c_{80})$ for each of the 80 classes for each of the 5 boxes per cell. ","date":"2023-04-10","objectID":"/car_detection_with_yolo/:4:2","tags":null,"title":"Car detection with YOLO","uri":"/car_detection_with_yolo/"},{"categories":["Paper Read"],"content":"Exercise 1 - yolo_filter_boxes¶Implement yolo_filter_boxes(). Compute box scores by doing the elementwise product as described in Figure 4 ($p \\times c$). The following code may help you choose the right operator: a = np.random.randn(19, 19, 5, 1) b = np.random.randn(19, 19, 5, 80) c = a * b # shape of c will be (19, 19, 5, 80) This is an example of broadcasting (multiplying vectors of different sizes). For each box, find: the index of the class with the maximum box score the corresponding box score Useful References tf.math.argmax tf.math.reduce_max Helpful Hints For the axis parameter of argmax and reduce_max, if you want to select the last axis, one way to do so is to set axis=-1. This is similar to Python array indexing, where you can select the last position of an array using arrayname[-1]. Applying reduce_max normally collapses the axis for which the maximum is applied. keepdims=False is the default option, and allows that dimension to be removed. You don't need to keep the last dimension after applying the maximum here. Create a mask by using a threshold. As a reminder: ([0.9, 0.3, 0.4, 0.5, 0.1] \u003c 0.4) returns: [False, True, False, False, True]. The mask should be True for the boxes you want to keep. Use TensorFlow to apply the mask to box_class_scores, boxes and box_classes to filter out the boxes you don't want. You should be left with just the subset of boxes you want to keep. One more useful reference: tf.boolean mask And one more helpful hint: :) For the tf.boolean_mask, you can keep the default axis=None. In [6]: # UNQ_C1 (UNIQUE CELL IDENTIFIER, DO NOT EDIT) # GRADED FUNCTION: yolo_filter_boxes def yolo_filter_boxes(boxes, box_confidence, box_class_probs, threshold = .6): \"\"\"Filters YOLO boxes by thresholding on object and class confidence. Arguments: boxes -- tensor of shape (19, 19, 5, 4) box_confidence -- tensor of shape (19, 19, 5, 1) box_class_probs -- tensor of shape (19, 19, 5, 80) threshold -- real value, if [ highest class probability score \u003c threshold], then get rid of the corresponding box Returns: scores -- tensor of shape (None,), containing the class probability score for selected boxes boxes -- tensor of shape (None, 4), containing (b_x, b_y, b_h, b_w) coordinates of selected boxes classes -- tensor of shape (None,), containing the index of the class detected by the selected boxes Note: \"None\" is here because you don't know the exact number of selected boxes, as it depends on the threshold. For example, the actual output size of scores would be (10,) if there are 10 boxes. \"\"\" ### START CODE HERE # Step 1: Compute box scores ##(≈ 1 line) box_scores = box_confidence * box_class_probs # Step 2: Find the box_classes using the max box_scores, keep track of the corresponding score ##(≈ 2 lines) # IMPORTANT: set axis to -1 box_classes = tf.math.argmax(box_scores, axis = -1) box_class_scores = tf.math.reduce_max(box_scores, axis = -1) # Step 3: Create a filtering mask based on \"box_class_scores\" by using \"threshold\". The mask should have the # same dimension as box_class_scores, and be True for the boxes you want to keep (with probability \u003e= threshold) ## (≈ 1 line) filtering_mask = box_class_scores \u003e= threshold # Step 4: Apply the mask to box_class_scores, boxes and box_classes ## (≈ 3 lines) scores = tf.boolean_mask(box_class_scores, filtering_mask) boxes = tf.boolean_mask(boxes, filtering_mask) classes = tf.boolean_mask(box_classes, filtering_mask) ### END CODE HERE return scores, boxes, classes In [7]: # BEGIN UNIT TEST tf.random.set_seed(10) box_confidence = tf.random.normal([19, 19, 5, 1], mean=1, stddev=4, seed = 1) boxes = tf.random.normal([19, 19, 5, 4], mean=1, stddev=4, seed = 1) box_class_probs = tf.random.normal([19, 19, 5, 80], mean=1, stddev=4, seed = 1) scores, boxes, classes = yolo_filter_boxes(boxes, box_confidence, box_class_probs, threshold = 0.5) print(\"scores[2] = \" + str(scores[2].numpy())) print(\"boxes[2] = \" + str(boxes[2].numpy())) print(\"classes[2] = \" + str(classes[2].numpy())","date":"2023-04-10","objectID":"/car_detection_with_yolo/:4:3","tags":null,"title":"Car detection with YOLO","uri":"/car_detection_with_yolo/"},{"categories":["Paper Read"],"content":"2.3 - Non-max Suppression¶Even after filtering by thresholding over the class scores, you still end up with a lot of overlapping boxes. A second filter for selecting the right boxes is called non-maximum suppression (NMS). Figure 7 : In this example, the model has predicted 3 cars, but it's actually 3 predictions of the same car. Running non-max suppression (NMS) will select only the most accurate (highest probability) of the 3 boxes. Non-max suppression uses the very important function called \"Intersection over Union\", or IoU. Figure 8 : Definition of \"Intersection over Union\". ","date":"2023-04-10","objectID":"/car_detection_with_yolo/:4:4","tags":null,"title":"Car detection with YOLO","uri":"/car_detection_with_yolo/"},{"categories":["Paper Read"],"content":"Exercise 2 - iou¶Implement iou() Some hints: This code uses the convention that (0,0) is the top-left corner of an image, (1,0) is the upper-right corner, and (1,1) is the lower-right corner. In other words, the (0,0) origin starts at the top left corner of the image. As x increases, you move to the right. As y increases, you move down. For this exercise, a box is defined using its two corners: upper left $(x_1, y_1)$ and lower right $(x_2,y_2)$, instead of using the midpoint, height and width. This makes it a bit easier to calculate the intersection. To calculate the area of a rectangle, multiply its height $(y_2 - y_1)$ by its width $(x_2 - x_1)$. Since $(x_1,y_1)$ is the top left and $x_2,y_2$ are the bottom right, these differences should be non-negative. To find the intersection of the two boxes $(xi_{1}, yi_{1}, xi_{2}, yi_{2})$: Feel free to draw some examples on paper to clarify this conceptually. The top left corner of the intersection $(xi_{1}, yi_{1})$ is found by comparing the top left corners $(x_1, y_1)$ of the two boxes and finding a vertex that has an x-coordinate that is closer to the right, and y-coordinate that is closer to the bottom. The bottom right corner of the intersection $(xi_{2}, yi_{2})$ is found by comparing the bottom right corners $(x_2,y_2)$ of the two boxes and finding a vertex whose x-coordinate is closer to the left, and the y-coordinate that is closer to the top. The two boxes may have no intersection. You can detect this if the intersection coordinates you calculate end up being the top right and/or bottom left corners of an intersection box. Another way to think of this is if you calculate the height $(y_2 - y_1)$ or width $(x_2 - x_1)$ and find that at least one of these lengths is negative, then there is no intersection (intersection area is zero). The two boxes may intersect at the edges or vertices, in which case the intersection area is still zero. This happens when either the height or width (or both) of the calculated intersection is zero. Additional Hints xi1 = maximum of the x1 coordinates of the two boxes yi1 = maximum of the y1 coordinates of the two boxes xi2 = minimum of the x2 coordinates of the two boxes yi2 = minimum of the y2 coordinates of the two boxes inter_area = You can use max(height, 0) and max(width, 0) In [20]: # UNQ_C2 (UNIQUE CELL IDENTIFIER, DO NOT EDIT) # GRADED FUNCTION: iou def iou(box1, box2): \"\"\"Implement the intersection over union (IoU) between box1 and box2 Arguments: box1 -- first box, list object with coordinates (box1_x1, box1_y1, box1_x2, box_1_y2) box2 -- second box, list object with coordinates (box2_x1, box2_y1, box2_x2, box2_y2) \"\"\" (box1_x1, box1_y1, box1_x2, box1_y2) = box1 (box2_x1, box2_y1, box2_x2, box2_y2) = box2 ### START CODE HERE # Calculate the (yi1, xi1, yi2, xi2) coordinates of the intersection of box1 and box2. Calculate its Area. ##(≈ 7 lines) xi1 = max(box1_x1, box2_x1) yi1 = max(box1_y1, box2_y1) xi2 = min(box1_x2, box2_x2) yi2 = min(box1_y2, box2_y2) inter_width = max(xi2 - xi1, 0) inter_height = max(yi2 - yi1, 0) inter_area = inter_width * inter_height # Calculate the Union area by using Formula: Union(A,B) = A + B - Inter(A,B) ## (≈ 3 lines) box1_area = (box1_x2 - box1_x1) * (box1_y2 - box1_y1) box2_area = (box2_x2 - box2_x1) * (box2_y2 - box2_y1) union_area = (box1_area + box2_area) - inter_area # compute the IoU iou = inter_area / union_area ### END CODE HERE return iou In [21]: # BEGIN UNIT TEST ## Test case 1: boxes intersect box1 = (2, 1, 4, 3) box2 = (1, 2, 3, 4) print(\"iou for intersecting boxes = \" + str(iou(box1, box2))) assert iou(box1, box2) \u003c 1, \"The intersection area must be always smaller or equal than the union area.\" assert np.isclose(iou(box1, box2), 0.14285714), \"Wrong value. Check your implementation. Problem with intersecting boxes\" ## Test case 2: boxes do not intersect box1 = (1,2,3,4) box2 = (5,6,7,8) print(\"iou for non-intersecting boxes = \" + str(iou(box1,box2))) assert iou(box1, box2) == 0, \"Intersec","date":"2023-04-10","objectID":"/car_detection_with_yolo/:4:5","tags":null,"title":"Car detection with YOLO","uri":"/car_detection_with_yolo/"},{"categories":["Paper Read"],"content":"2.4 - YOLO Non-max Suppression¶You are now ready to implement non-max suppression. The key steps are: Select the box that has the highest score. Compute the overlap of this box with all other boxes, and remove boxes that overlap significantly (iou \u003e= iou_threshold). Go back to step 1 and iterate until there are no more boxes with a lower score than the currently selected box. This will remove all boxes that have a large overlap with the selected boxes. Only the \"best\" boxes remain. ","date":"2023-04-10","objectID":"/car_detection_with_yolo/:4:6","tags":null,"title":"Car detection with YOLO","uri":"/car_detection_with_yolo/"},{"categories":["Paper Read"],"content":"Exercise 3 - yolo_non_max_suppression¶Implement yolo_non_max_suppression() using TensorFlow. TensorFlow has two built-in functions that are used to implement non-max suppression (so you don't actually need to use your iou() implementation): Reference documentation: tf.image.non_max_suppression() tf.image.non_max_suppression( boxes, scores, max_output_size, iou_threshold=0.5, name=None ) Note that in the version of TensorFlow used here, there is no parameter score_threshold (it's shown in the documentation for the latest version) so trying to set this value will result in an error message: got an unexpected keyword argument score_threshold. tf.gather() keras.gather( reference, indices ) In [22]: # UNQ_C3 (UNIQUE CELL IDENTIFIER, DO NOT EDIT) # GRADED FUNCTION: yolo_non_max_suppression def yolo_non_max_suppression(scores, boxes, classes, max_boxes = 10, iou_threshold = 0.5): \"\"\" Applies Non-max suppression (NMS) to set of boxes Arguments: scores -- tensor of shape (None,), output of yolo_filter_boxes() boxes -- tensor of shape (None, 4), output of yolo_filter_boxes() that have been scaled to the image size (see later) classes -- tensor of shape (None,), output of yolo_filter_boxes() max_boxes -- integer, maximum number of predicted boxes you'd like iou_threshold -- real value, \"intersection over union\" threshold used for NMS filtering Returns: scores -- tensor of shape (None, ), predicted score for each box boxes -- tensor of shape (None, 4), predicted box coordinates classes -- tensor of shape (None, ), predicted class for each box Note: The \"None\" dimension of the output tensors has obviously to be less than max_boxes. Note also that this function will transpose the shapes of scores, boxes, classes. This is made for convenience. \"\"\" max_boxes_tensor = tf.Variable(max_boxes, dtype='int32') # tensor to be used in tf.image.non_max_suppression() ### START CODE HERE # Use tf.image.non_max_suppression() to get the list of indices corresponding to boxes you keep ##(≈ 1 line) nms_indices = tf.image.non_max_suppression(boxes, scores, max_boxes, iou_threshold) # Use tf.gather() to select only nms_indices from scores, boxes and classes ##(≈ 3 lines) scores = tf.gather(scores, nms_indices) boxes = tf.gather(boxes, nms_indices) classes = tf.gather(classes, nms_indices) ### END CODE HERE return scores, boxes, classes In [23]: # BEGIN UNIT TEST tf.random.set_seed(10) scores = tf.random.normal([54,], mean=1, stddev=4, seed = 1) boxes = tf.random.normal([54, 4], mean=1, stddev=4, seed = 1) classes = tf.random.normal([54,], mean=1, stddev=4, seed = 1) scores, boxes, classes = yolo_non_max_suppression(scores, boxes, classes) assert type(scores) == EagerTensor, \"Use tensoflow functions\" print(\"scores[2] = \" + str(scores[2].numpy())) print(\"boxes[2] = \" + str(boxes[2].numpy())) print(\"classes[2] = \" + str(classes[2].numpy())) print(\"scores.shape = \" + str(scores.numpy().shape)) print(\"boxes.shape = \" + str(boxes.numpy().shape)) print(\"classes.shape = \" + str(classes.numpy().shape)) assert type(scores) == EagerTensor, \"Use tensoflow functions\" assert type(boxes) == EagerTensor, \"Use tensoflow functions\" assert type(classes) == EagerTensor, \"Use tensoflow functions\" assert scores.shape == (10,), \"Wrong shape\" assert boxes.shape == (10, 4), \"Wrong shape\" assert classes.shape == (10,), \"Wrong shape\" assert np.isclose(scores[2].numpy(), 8.147684), \"Wrong value on scores\" assert np.allclose(boxes[2].numpy(), [ 6.0797963, 3.743308, 1.3914018, -0.34089637]), \"Wrong value on boxes\" assert np.isclose(classes[2].numpy(), 1.7079165), \"Wrong value on classes\" print(\"\\033[92m All tests passed!\") # END UNIT TEST scores[2] = 8.147684 boxes[2] = [ 6.0797963 3.743308 1.3914018 -0.34089637] classes[2] = 1.7079165 scores.shape = (10,) boxes.shape = (10, 4) classes.shape = (10,) All tests passed! Expected Output: scores[2] 8.147684 boxes[2] [ 6.0797963 3.743308 1.3914018 -0.34089637] classes[2] 1.7079165 scores.shape (10,) boxes.shape (10, 4) classes.shape (10,) ","date":"2023-04-10","objectID":"/car_detection_with_yolo/:4:7","tags":null,"title":"Car detection with YOLO","uri":"/car_detection_with_yolo/"},{"categories":["Paper Read"],"content":"2.5 - Wrapping Up the Filtering¶It's time to implement a function taking the output of the deep CNN (the 19x19x5x85 dimensional encoding) and filtering through all the boxes using the functions you've just implemented. ","date":"2023-04-10","objectID":"/car_detection_with_yolo/:4:8","tags":null,"title":"Car detection with YOLO","uri":"/car_detection_with_yolo/"},{"categories":["Paper Read"],"content":"Exercise 4 - yolo_eval¶Implement yolo_eval() which takes the output of the YOLO encoding and filters the boxes using score threshold and NMS. There's just one last implementational detail you have to know. There're a few ways of representing boxes, such as via their corners or via their midpoint and height/width. YOLO converts between a few such formats at different times, using the following functions (which are provided): boxes = yolo_boxes_to_corners(box_xy, box_wh) which converts the yolo box coordinates (x,y,w,h) to box corners' coordinates (x1, y1, x2, y2) to fit the input of yolo_filter_boxes boxes = scale_boxes(boxes, image_shape) YOLO's network was trained to run on 608x608 images. If you are testing this data on a different size image -- for example, the car detection dataset had 720x1280 images -- this step rescales the boxes so that they can be plotted on top of the original 720x1280 image. Don't worry about these two functions; you'll see where they need to be called below. In [26]: def yolo_boxes_to_corners(box_xy, box_wh): \"\"\"Convert YOLO box predictions to bounding box corners.\"\"\" box_mins = box_xy - (box_wh / 2.) box_maxes = box_xy + (box_wh / 2.) return tf.keras.backend.concatenate([ box_mins[..., 1:2], # y_min box_mins[..., 0:1], # x_min box_maxes[..., 1:2], # y_max box_maxes[..., 0:1] # x_max ]) In [27]: # UNQ_C4 (UNIQUE CELL IDENTIFIER, DO NOT EDIT) # GRADED FUNCTION: yolo_eval def yolo_eval(yolo_outputs, image_shape = (720, 1280), max_boxes=10, score_threshold=.6, iou_threshold=.5): \"\"\" Converts the output of YOLO encoding (a lot of boxes) to your predicted boxes along with their scores, box coordinates and classes. Arguments: yolo_outputs -- output of the encoding model (for image_shape of (608, 608, 3)), contains 4 tensors: box_xy: tensor of shape (None, 19, 19, 5, 2) box_wh: tensor of shape (None, 19, 19, 5, 2) box_confidence: tensor of shape (None, 19, 19, 5, 1) box_class_probs: tensor of shape (None, 19, 19, 5, 80) image_shape -- tensor of shape (2,) containing the input shape, in this notebook we use (608., 608.) (has to be float32 dtype) max_boxes -- integer, maximum number of predicted boxes you'd like score_threshold -- real value, if [ highest class probability score \u003c threshold], then get rid of the corresponding box iou_threshold -- real value, \"intersection over union\" threshold used for NMS filtering Returns: scores -- tensor of shape (None, ), predicted score for each box boxes -- tensor of shape (None, 4), predicted box coordinates classes -- tensor of shape (None,), predicted class for each box \"\"\" ### START CODE HERE # Retrieve outputs of the YOLO model (≈1 line) box_xy, box_wh, box_confidence, box_class_probs = yolo_outputs # Convert boxes to be ready for filtering functions (convert boxes box_xy and box_wh to corner coordinates) boxes = yolo_boxes_to_corners(box_xy, box_wh) # Use one of the functions you've implemented to perform Score-filtering with a threshold of score_threshold (≈1 line) scores, boxes, classes = yolo_filter_boxes(boxes, box_confidence, box_class_probs, score_threshold) # Scale boxes back to original image shape. boxes = scale_boxes(boxes, image_shape) # Use one of the functions you've implemented to perform Non-max suppression with # maximum number of boxes set to max_boxes and a threshold of iou_threshold (≈1 line) scores, boxes, classes = yolo_non_max_suppression(scores, boxes, classes, max_boxes, iou_threshold) ### END CODE HERE return scores, boxes, classes In [28]: # BEGIN UNIT TEST tf.random.set_seed(10) yolo_outputs = (tf.random.normal([19, 19, 5, 2], mean=1, stddev=4, seed = 1), tf.random.normal([19, 19, 5, 2], mean=1, stddev=4, seed = 1), tf.random.normal([19, 19, 5, 1], mean=1, stddev=4, seed = 1), tf.random.normal([19, 19, 5, 80], mean=1, stddev=4, seed = 1)) scores, boxes, classes = yolo_eval(yolo_outputs) print(\"scores[2] = \" + str(scores[2].numpy())) print(\"boxes[2] = \" + str(boxes[2].numpy())) print(\"classes[2] = \" + str(classes[2].numpy())) print(\"sc","date":"2023-04-10","objectID":"/car_detection_with_yolo/:4:9","tags":null,"title":"Car detection with YOLO","uri":"/car_detection_with_yolo/"},{"categories":["Paper Read"],"content":"3 - Test YOLO Pre-trained Model on Images¶In this section, you are going to use a pre-trained model and test it on the car detection dataset. ","date":"2023-04-10","objectID":"/car_detection_with_yolo/:5:0","tags":null,"title":"Car detection with YOLO","uri":"/car_detection_with_yolo/"},{"categories":["Paper Read"],"content":"3.1 - Defining Classes, Anchors and Image Shape¶You're trying to detect 80 classes, and are using 5 anchor boxes. The information on the 80 classes and 5 boxes is gathered in two files: \"coco_classes.txt\" and \"yolo_anchors.txt\". You'll read class names and anchors from text files. The car detection dataset has 720x1280 images, which are pre-processed into 608x608 images. In [29]: class_names = read_classes(\"model_data/coco_classes.txt\") anchors = read_anchors(\"model_data/yolo_anchors.txt\") model_image_size = (608, 608) # Same as yolo_model input layer size ","date":"2023-04-10","objectID":"/car_detection_with_yolo/:5:1","tags":null,"title":"Car detection with YOLO","uri":"/car_detection_with_yolo/"},{"categories":["Paper Read"],"content":"3.2 - Loading a Pre-trained Model¶Training a YOLO model takes a very long time and requires a fairly large dataset of labelled bounding boxes for a large range of target classes. You are going to load an existing pre-trained Keras YOLO model stored in \"yolo.h5\". These weights come from the official YOLO website, and were converted using a function written by Allan Zelener. References are at the end of this notebook. Technically, these are the parameters from the \"YOLOv2\" model, but are simply referred to as \"YOLO\" in this notebook. Run the cell below to load the model from this file. In [30]: yolo_model = load_model(\"model_data/\", compile=False) This loads the weights of a trained YOLO model. Here's a summary of the layers your model contains: In [31]: yolo_model.summary() Model: \"functional_1\" __________________________________________________________________________________________________ Layer (type) Output Shape Param # Connected to ================================================================================================== input_1 (InputLayer) [(None, 608, 608, 3) 0 __________________________________________________________________________________________________ conv2d (Conv2D) (None, 608, 608, 32) 864 input_1[0][0] __________________________________________________________________________________________________ batch_normalization (BatchNorma (None, 608, 608, 32) 128 conv2d[0][0] __________________________________________________________________________________________________ leaky_re_lu (LeakyReLU) (None, 608, 608, 32) 0 batch_normalization[0][0] __________________________________________________________________________________________________ max_pooling2d (MaxPooling2D) (None, 304, 304, 32) 0 leaky_re_lu[0][0] __________________________________________________________________________________________________ conv2d_1 (Conv2D) (None, 304, 304, 64) 18432 max_pooling2d[0][0] __________________________________________________________________________________________________ batch_normalization_1 (BatchNor (None, 304, 304, 64) 256 conv2d_1[0][0] __________________________________________________________________________________________________ leaky_re_lu_1 (LeakyReLU) (None, 304, 304, 64) 0 batch_normalization_1[0][0] __________________________________________________________________________________________________ max_pooling2d_1 (MaxPooling2D) (None, 152, 152, 64) 0 leaky_re_lu_1[0][0] __________________________________________________________________________________________________ conv2d_2 (Conv2D) (None, 152, 152, 128 73728 max_pooling2d_1[0][0] __________________________________________________________________________________________________ batch_normalization_2 (BatchNor (None, 152, 152, 128 512 conv2d_2[0][0] __________________________________________________________________________________________________ leaky_re_lu_2 (LeakyReLU) (None, 152, 152, 128 0 batch_normalization_2[0][0] __________________________________________________________________________________________________ conv2d_3 (Conv2D) (None, 152, 152, 64) 8192 leaky_re_lu_2[0][0] __________________________________________________________________________________________________ batch_normalization_3 (BatchNor (None, 152, 152, 64) 256 conv2d_3[0][0] __________________________________________________________________________________________________ leaky_re_lu_3 (LeakyReLU) (None, 152, 152, 64) 0 batch_normalization_3[0][0] __________________________________________________________________________________________________ conv2d_4 (Conv2D) (None, 152, 152, 128 73728 leaky_re_lu_3[0][0] __________________________________________________________________________________________________ batch_normalization_4 (BatchNor (None, 152, 152, 128 512 conv2d_4[0][0] __________________________________________________________________________________________________ leaky_re_lu_4 (LeakyReLU) (None, 152, 152, 128 0 batch_normalization_4[0][0] _______________________","date":"2023-04-10","objectID":"/car_detection_with_yolo/:5:2","tags":null,"title":"Car detection with YOLO","uri":"/car_detection_with_yolo/"},{"categories":["Paper Read"],"content":"3.3 - Convert Output of the Model to Usable Bounding Box Tensors¶The output of yolo_model is a (m, 19, 19, 5, 85) tensor that needs to pass through non-trivial processing and conversion. You will need to call yolo_head to format the encoding of the model you got from yolo_model into something decipherable: yolo_model_outputs = yolo_model(image_data) yolo_outputs = yolo_head(yolo_model_outputs, anchors, len(class_names)) The variable yolo_outputs will be defined as a set of 4 tensors that you can then use as input by your yolo_eval function. If you are curious about how yolo_head is implemented, you can find the function definition in the file keras_yolo.py. The file is also located in your workspace in this path: yad2k/models/keras_yolo.py. ","date":"2023-04-10","objectID":"/car_detection_with_yolo/:5:3","tags":null,"title":"Car detection with YOLO","uri":"/car_detection_with_yolo/"},{"categories":["Paper Read"],"content":"3.4 - Filtering Boxes¶yolo_outputs gave you all the predicted boxes of yolo_model in the correct format. To perform filtering and select only the best boxes, you will call yolo_eval, which you had previously implemented, to do so: out_scores, out_boxes, out_classes = yolo_eval(yolo_outputs, [image.size[1], image.size[0]], 10, 0.3, 0.5) ","date":"2023-04-10","objectID":"/car_detection_with_yolo/:5:4","tags":null,"title":"Car detection with YOLO","uri":"/car_detection_with_yolo/"},{"categories":["Paper Read"],"content":"3.5 - Run the YOLO on an Image¶Let the fun begin! You will create a graph that can be summarized as follows: yolo_model.input is given to yolo_model. The model is used to compute the output yolo_model.output yolo_model.output is processed by yolo_head. It gives you yolo_outputs yolo_outputs goes through a filtering function, yolo_eval. It outputs your predictions: out_scores, out_boxes, out_classes. Now, we have implemented for you the predict(image_file) function, which runs the graph to test YOLO on an image to compute out_scores, out_boxes, out_classes. The code below also uses the following function: image, image_data = preprocess_image(\"images/\" + image_file, model_image_size = (608, 608)) which opens the image file and scales, reshapes and normalizes the image. It returns the outputs: image: a python (PIL) representation of your image used for drawing boxes. You won't need to use it. image_data: a numpy-array representing the image. This will be the input to the CNN. In [32]: def predict(image_file): \"\"\" Runs the graph to predict boxes for \"image_file\". Prints and plots the predictions. Arguments: image_file -- name of an image stored in the \"images\" folder. Returns: out_scores -- tensor of shape (None, ), scores of the predicted boxes out_boxes -- tensor of shape (None, 4), coordinates of the predicted boxes out_classes -- tensor of shape (None, ), class index of the predicted boxes Note: \"None\" actually represents the number of predicted boxes, it varies between 0 and max_boxes. \"\"\" # Preprocess your image image, image_data = preprocess_image(\"images/\" + image_file, model_image_size = (608, 608)) yolo_model_outputs = yolo_model(image_data) yolo_outputs = yolo_head(yolo_model_outputs, anchors, len(class_names)) out_scores, out_boxes, out_classes = yolo_eval(yolo_outputs, [image.size[1], image.size[0]], 10, 0.3, 0.5) # Print predictions info print('Found {}boxes for {}'.format(len(out_boxes), \"images/\" + image_file)) # Generate colors for drawing bounding boxes. colors = get_colors_for_classes(len(class_names)) # Draw bounding boxes on the image file #draw_boxes2(image, out_scores, out_boxes, out_classes, class_names, colors, image_shape) draw_boxes(image, out_boxes, out_classes, class_names, out_scores) # Save the predicted bounding box on the image image.save(os.path.join(\"out\", image_file), quality=100) # Display the results in the notebook output_image = Image.open(os.path.join(\"out\", image_file)) imshow(output_image) return out_scores, out_boxes, out_classes Run the following cell on the \"test.jpg\" image to verify that your function is correct. In [33]: out_scores, out_boxes, out_classes = predict(\"test.jpg\") Found 10 boxes for images/test.jpg car 0.89 (367, 300) (745, 648) car 0.80 (761, 282) (942, 412) car 0.74 (159, 303) (346, 440) car 0.70 (947, 324) (1280, 705) bus 0.67 (5, 266) (220, 407) car 0.66 (706, 279) (786, 350) car 0.60 (925, 285) (1045, 374) car 0.44 (336, 296) (378, 335) car 0.37 (965, 273) (1022, 292) traffic light 0.36 (681, 195) (692, 214) Expected Output: Found 10 boxes for images/test.jpg car 0.89 (367, 300) (745, 648) car 0.80 (761, 282) (942, 412) car 0.74 (159, 303) (346, 440) car 0.70 (947, 324) (1280, 705) bus 0.67 (5, 266) (220, 407) car 0.66 (706, 279) (786, 350) car 0.60 (925, 285) (1045, 374) car 0.44 (336, 296) (378, 335) car 0.37 (965, 273) (1022, 292) traffic light 00.36 (681, 195) (692, 214) The model you've just run is actually able to detect 80 different classes listed in \"coco_classes.txt\". To test the model on your own images: 1. Click on \"File\" in the upper bar of this notebook, then click \"Open\" to go on your Coursera Hub. 2. Add your image to this Jupyter Notebook's directory, in the \"images\" folder 3. Write your image's name in the cell above code 4. Run the code and see the output of the algorithm! If you were to run your session in a for loop over all your images. Here's what you would get: Predictions of the YOLO model on pictures taken from a camera while driving around ","date":"2023-04-10","objectID":"/car_detection_with_yolo/:5:5","tags":null,"title":"Car detection with YOLO","uri":"/car_detection_with_yolo/"},{"categories":["Paper Read"],"content":"4 - Summary for YOLO¶ Input image (608, 608, 3) The input image goes through a CNN, resulting in a (19,19,5,85) dimensional output. After flattening the last two dimensions, the output is a volume of shape (19, 19, 425): Each cell in a 19x19 grid over the input image gives 425 numbers. 425 = 5 x 85 because each cell contains predictions for 5 boxes, corresponding to 5 anchor boxes, as seen in lecture. 85 = 5 + 80 where 5 is because $(p_c, b_x, b_y, b_h, b_w)$ has 5 numbers, and 80 is the number of classes we'd like to detect You then select only few boxes based on: Score-thresholding: throw away boxes that have detected a class with a score less than the threshold Non-max suppression: Compute the Intersection over Union and avoid selecting overlapping boxes This gives you YOLO's final output. What you should remember: YOLO is a state-of-the-art object detection model that is fast and accurate It runs an input image through a CNN, which outputs a 19x19x5x85 dimensional volume. The encoding can be seen as a grid where each of the 19x19 cells contains information about 5 boxes. You filter through all the boxes using non-max suppression. Specifically: Score thresholding on the probability of detecting a class to keep only accurate (high probability) boxes Intersection over Union (IoU) thresholding to eliminate overlapping boxes Because training a YOLO model from randomly initialized weights is non-trivial and requires a large dataset as well as lot of computation, previously trained model parameters were used in this exercise. If you wish, you can also try fine-tuning the YOLO model with your own dataset, though this would be a fairly non-trivial exercise. Congratulations! You've come to the end of this assignment. Here's a quick recap of all you've accomplished. You've: Detected objects in a car detection dataset Implemented non-max suppression to achieve better accuracy Implemented intersection over union as a function of NMS Created usable bounding box tensors from the model's predictions Amazing work! If you'd like to know more about the origins of these ideas, spend some time on the papers referenced below. ","date":"2023-04-10","objectID":"/car_detection_with_yolo/:6:0","tags":null,"title":"Car detection with YOLO","uri":"/car_detection_with_yolo/"},{"categories":["Paper Read"],"content":"5 - References¶The ideas presented in this notebook came primarily from the two YOLO papers. The implementation here also took significant inspiration and used many components from Allan Zelener's GitHub repository. The pre-trained weights used in this exercise came from the official YOLO website. Joseph Redmon, Santosh Divvala, Ross Girshick, Ali Farhadi - You Only Look Once: Unified, Real-Time Object Detection (2015) Joseph Redmon, Ali Farhadi - YOLO9000: Better, Faster, Stronger (2016) Allan Zelener - YAD2K: Yet Another Darknet 2 Keras The official YOLO website (https://pjreddie.com/darknet/yolo/) ","date":"2023-04-10","objectID":"/car_detection_with_yolo/:7:0","tags":null,"title":"Car detection with YOLO","uri":"/car_detection_with_yolo/"},{"categories":["Paper Read"],"content":"Car detection dataset¶ \u003cspan xmlns:dct=\"http://purl.org/dc/terms/\" property=\"dct:title\"\u003eThe Drive.ai Sample Dataset\u003c/span\u003e (provided by drive.ai) is licensed under a Creative Commons Attribution 4.0 International License. Thanks to Brody Huval, Chih Hu and Rahul Patel for providing this data. ","date":"2023-04-10","objectID":"/car_detection_with_yolo/:7:1","tags":null,"title":"Car detection with YOLO","uri":"/car_detection_with_yolo/"},{"categories":["Algorithm"],"content":"后缀数组概念 设有一字符串s 子串 字符串s的子串为s中从下标i到下标j的连续的一段字符组成的字符串s[i...j]，假设字符串下标从1开始. 后缀 指从某个位置i开始到整个字符串末尾的一个子串，记作suffix(i) = s[i...len(s)]. 字符串大小比较 按字典顺序比较，显然两个不同开头位置的后缀suffix(i)和suffix(j)不可能相等，即suffix(i) != suffix(j) (i != j) 后缀数组 sa为一个一维数组，保存了1~n的某个排列sa[1]、sa[2]、... sa[n]，满足suffix(sa[i]) \u003c suffix(sa[i + 1]) 名次数组 rank为一个名次数组，其中rank[i]为suffix(i)在所有后缀中从小到大的名次为多少。 总的来说就是，后缀数组sa记录了排第几的是哪个后缀，名次数组rank记录了当前这个后缀排第几。 例子： 设字符串s = aabaaaab suffix(1) = aabaaaab suffix(2) = abaaaab suffix(3) = baaaab suffix(4) = aaaab suffix(5) = aaab suffix(6) = aab suffix(7) = ab suffix(8) = b 最小的后缀应该是suffix(4)，然后是suffix(5) ... 得到以下后缀数组 sa[1] = 4 // aaaab sa[2] = 5 // aaab sa[3] = 6 // aab sa[4] = 1 // aabaaaab sa[5] = 7 // ab sa[6] = 2 // abaaaab sa[7] = 8 // b sa[8] = 3 // baaaab 由此也能得到名次数组 rank|4|6|8|1|2|3|5|7| --------------------- s |a|a|b|a|a|a|a|b| 设字符串长度为n。为了方便比较大小，可以在字符串后面添加一个字符，这个字符没有在前面的字符出现过，而且比前面的字符都要小。在求出名次数组后，可以仅用O(1)的时间比较任意两个后缀的大小。在求出后缀数组或者名次数组其中的一个，可以在O(n)的时间求出另外一个。 ","date":"2023-03-13","objectID":"/suffix_array/:1:0","tags":["C++","Algorithm"],"title":"[算法刷题]后缀数组Suffix Array","uri":"/suffix_array/"},{"categories":["Algorithm"],"content":"构造后缀数组 ","date":"2023-03-13","objectID":"/suffix_array/:2:0","tags":["C++","Algorithm"],"title":"[算法刷题]后缀数组Suffix Array","uri":"/suffix_array/"},{"categories":["Algorithm"],"content":"倍增算法 O(NlogN) // 后缀数组，生成sa，rk，height数组 template\u003cclass T=string,int range=128\u003e struct SuffixArray{ T s; int n,bucketRange; int sa[range],second[range],bucket[range],mem[range],rk_mem[range+1],rk2_mem[range+1],height[range],*rk,*rk2; SuffixArray(const T\u0026_s):s(_s),n(s.size()),bucketRange(range){ rk=rk_mem; rk2=rk2_mem; rk[n]=rk2[n]=-1; memset(bucket,0,sizeof(bucket)); for(int i=0;i\u003cn;i++)bucket[rk[i]=s[i]]++; for(int i=1;i\u003cbucketRange;i++)bucket[i]+=bucket[i-1]; for(int i=0;i\u003cn;i++)sa[--bucket[rk[i]]]=i; for(int w=1;;w\u003c\u003c=1){ int j=0; for(int i=n-w;i\u003cn;i++)second[j++]=i; for(int i=0;i\u003cn;i++)if(sa[i]\u003e=w)second[j++]=sa[i]-w; memset(bucket,0,sizeof(bucket)); for(int i=0;i\u003cn;i++)bucket[mem[i]=rk[second[i]]]++; for(int i=1;i\u003cbucketRange;i++)bucket[i]+=bucket[i-1]; for(int i=n-1;i\u003e=0;i--)sa[--bucket[mem[i]]]=second[i]; bucketRange=0; for(int i=0;i\u003cn;i++){ rk2[sa[i]]=!i||(rk[sa[i]]==rk[sa[i-1]]\u0026\u0026rk[sa[i]+w]==rk[sa[i-1]+w])?bucketRange:++bucketRange; } swap(rk,rk2); if(++bucketRange==n)break; } } void getHeight(){ memset(height,0xff,sizeof(height)); for(int i=0,h=0;i\u003cn;i++){ if(h)h--; if(rk[i])while(sa[rk[i]-1]+h\u003cn\u0026\u0026s[i+h]==s[sa[rk[i]-1]+h])h++; height[rk[i]]=h; } } }; ","date":"2023-03-13","objectID":"/suffix_array/:2:1","tags":["C++","Algorithm"],"title":"[算法刷题]后缀数组Suffix Array","uri":"/suffix_array/"},{"categories":["Algorithm"],"content":"3DC算法 O(N) // TODO ","date":"2023-03-13","objectID":"/suffix_array/:2:2","tags":["C++","Algorithm"],"title":"[算法刷题]后缀数组Suffix Array","uri":"/suffix_array/"},{"categories":["Algorithm"],"content":"SA-IS O(N) 模板 class SuffixArray { public: using size_type = unsigned; using pointer = size_type*; using const_pointer = const size_type*; private: template\u003ctypename It\u003e inline static void get_sbuk(It s, pointer sbuk, size_type n, size_type m) { std::fill_n(sbuk, m, 0); for (size_type i = 0;i \u003c n;++i) ++sbuk[s[i]]; std::partial_sum(sbuk, sbuk + m, sbuk); } inline static void lbuk_to_sbuk(const_pointer lbuk, pointer sbuk, size_type n, size_type m) { std::copy_n(lbuk + 1, m - 1, sbuk); sbuk[m - 1] = n; } inline static void sbuk_to_lbuk(pointer lbuk, const_pointer sbuk, size_type n, size_type m) { std::copy_n(sbuk, m - 1, lbuk + 1); lbuk[0] = 0; } template\u003cbool Stage, typename It\u003e inline static void induced_sort(It s, pointer sa, pointer lbuk, pointer sbuk, size_type n, size_type m) { constexpr size_type mask = size_type(1) \u003c\u003c (CHAR_BIT * sizeof(size_type) - 1); using value_type = typename std::iterator_traits\u003cIt\u003e::value_type; value_type prev = s[n - 1], cur; pointer ptr = sa + lbuk[prev]; *ptr++ = n - 1; for (size_type p, i = 0;i \u003c n;++i) { if ((p = sa[i] - 1) \u0026 mask) continue; if ((cur = s[p]) \u003c s[p + 1]) { sa[i] = ~p; continue; } if (cur != prev) { lbuk[prev] = ptr - sa; ptr = sa + lbuk[prev = cur]; } *ptr++ = p; if (!Stage) sa[i] = 0; } ptr = sa + sbuk[prev = 0]; sbuk_to_lbuk(lbuk, sbuk, n, m); for (size_type p, i = n;i-- \u003e 0;) { if ((p = ~sa[i]) \u0026 mask) continue; if ((cur = s[p]) \u003e s[p + 1]) { sa[i] = p + 1; continue; } if (cur != prev) { sbuk[prev] = ptr - sa; ptr = sa + sbuk[prev = cur]; } *--ptr = ~p + 1; sa[i] = Stage ? p + 1 : 0; } } template\u003ctypename It\u003e inline static size_type fill_lms_char(It s, pointer sa, pointer mid, pointer sbuk, size_type n) { using value_type = typename std::iterator_traits\u003cIt\u003e::value_type; const pointer len = mid; pointer pos = mid; value_type prev, cur = s[n - 1]; for (size_type j = n - 1, i = n - 1;i \u003e 0;) { do prev = cur; while (i \u003e 0 \u0026\u0026 (cur = s[--i]) \u003e= prev); if (cur \u003e= prev) break; do prev = cur; while (i \u003e 0 \u0026\u0026 (cur = s[--i]) \u003c= prev); if (cur \u003c= prev) break; const size_type p = i + 1; sa[--sbuk[s[p]]] = p; len[p / 2] = j - i; *--pos = j = p; } return mid - pos; } template\u003ctypename It\u003e inline static void fill_lms_suffix(It s, pointer sa, const_pointer pos, pointer sbuk, size_type n, size_type m, size_type n0) { using value_type = typename std::iterator_traits\u003cIt\u003e::value_type; value_type prev = m, cur; size_type j = n; for (size_type p, i = n0;i \u003e 0;) { if ((cur = s[p = pos[sa[--i]]]) != prev) { const size_type b = sbuk[prev = cur]; while (j \u003e b) sa[--j] = 0; } sa[--j] = p; } while (j \u003e 0) sa[--j] = 0; } template\u003ctypename It\u003e inline static size_type rename(It s, pointer sa, const_pointer len, size_type n, size_type m, size_type n0) { for (size_type p, j = 0, i = 0;j \u003c n0;++i) { if ((p = sa[i]) != 0) { sa[i] = 0; sa[j++] = p; } } const pointer sa0 = sa, s0 = sa + n0; size_type m0 = 0, plen = 0; It ppos = s; for (size_type i = 0;i \u003c n0;++i) { const size_type p = sa[i], nlen = len[p / 2]; if (nlen != plen || !std::equal(ppos, ppos + plen, s + p)) ++m0; s0[p / 2] = m0; ppos = s + p; plen = nlen; } for (size_type p, j = 0, i = 0;j \u003c n0;++i) if ((p = s0[i]) != 0) s0[j++] = p - 1; return m0; } public: template\u003ctypename It\u003e static void suffix_sort(It s, pointer sa, pointer buf, pointer lbuk, pointer sbuk, size_type n, size_type m) { static_assert(std::is_same_v\u003ctypename std::iterator_traits\u003cIt\u003e::iterator_category, std::random_access_iterator_tag\u003e); std::fill_n(sa, n, 0); get_sbuk(s, sbuk, n, m); sbuk_to_lbuk(lbuk, sbuk, n, m); const pointer mid = buf + n / 2; const size_type n0 = fill_lms_char(s, sa, mid, sbuk, n); const pointer len = mid, pos = mid - n0; lbuk_to_sbuk(lbuk, sbuk, n, m); induced_sort\u003c0\u003e(s, sa, lbuk, sbuk, n, m); const size_type m0 = rename(s, sa, len, n, m, n0); const pointer sa0 = sa, s0 = sa + n0; if (m0 \u003c n0) suffix_sort(s0, sa0, mid, sbuk, sbuk + m0, n0, m0); else for (size_type i = 0;i \u003c n0;++i) sa0[s0[i]] = i; lbuk_to_sbuk(lbuk, sbuk, n, m); fill_lms_suffix(s, sa, pos, sbuk","date":"2023-03-13","objectID":"/suffix_array/:2:3","tags":["C++","Algorithm"],"title":"[算法刷题]后缀数组Suffix Array","uri":"/suffix_array/"},{"categories":["Algorithm"],"content":"后缀数组相关题目 LeetCode 1923.最长公共子路径 主代码（后缀数组为倍增算法模板） class Solution { //用counter来计数覆盖的path数量 //为何不用bool数组或者 bitset: 初始化的时间复杂度会超标 struct{ int mark[100000]={0},num=0; int timestamp=0; void reset(){ timestamp++; num=0; } void add(int i){ if(mark[i]!=timestamp){ mark[i]=timestamp; num++; } } }counter; public: int longestCommonSubpath(int n, vector\u003cvector\u003cint\u003e\u003e\u0026 paths) { int m=paths.size(); //all存放全部路径，sublen表示每个位置作为开头的最长子串长度，belong表示所属的路 vector\u003cint\u003eall,sublen,belong; for(int i=0;i\u003cm;i++){ for(int j=0;j\u003cpaths[i].size();j++){ all.push_back(paths[i][j]); sublen.push_back(paths[i].size()-j); belong.push_back(i); } } //后缀数组结构体自动生成 sa,rk,height 数组 SuffixArray\u003cvector\u003cint\u003e,100000\u003eSA(all); SA.getHeight(); auto sa=SA.sa,h=SA.height; //二分找出最低的height，使某个高于height的区间内包含所有的path int low=0,high=all.size(); while(low\u003chigh){ int mid=(low+high+1)/2; bool flag=false; for(int i=0,j;i\u003call.size();i=j){ counter.reset(); for(j=i;j\u003call.size()\u0026\u0026(j==i||h[j]\u003e=mid);j++){ if(sublen[sa[j]]\u003e=mid)counter.add(belong[sa[j]]); } if(counter.num==m){ flag=true; break; } } if(flag)low=mid; else high=mid-1; } return low; } }; SA-IS模板主代码 const int N = 200010; class Solution { public: int s[N]; // 将串拼接起来,中间用不同字符隔开,结尾改为0 int belong[N]; // 当前字符属于第几个朋友 int longestCommonSubpath(int n, vector\u003cvector\u003cint\u003e\u003e\u0026 paths) { int len = 0; int m = paths.size(); // 朋友数量 for (int i = 0; i \u003c m; i ++ ) { for (int c: paths[i]) { s[len] = c + 1; // 从1开始 belong[len] = i + 1; len ++ ; } s[len ++ ] = 1e5 + 10; } s[ -- len] = 0; SuffixArray sa(s, len + 1, 1e6); // 找到大于等于答案的每一段height区间[i, j] // 如果[i - 1, j]的后缀包含了所有朋友则满足条件 auto check = [\u0026](int mid) -\u003e bool { for (int i = 1; i \u003c= len; i ++ ) { if (sa.ht[i] \u003e= mid) { vector\u003cbool\u003e seen(m + 1, false); int j = i + 1; while (j \u003c= len \u0026\u0026 sa.ht[j] \u003e= mid) j ++ ; j -- ; int c = 0; for (int k = i - 1; k \u003c= j; k ++ ) { if (seen[belong[sa.sa[k]]]) continue; c ++ ; seen[belong[sa.sa[k]]] = true; } if (c == m) return true; i = j + 1; } } return false; }; // 二分答案 int l = 0, r = len; while (l \u003c r) { int mid = (l + r) \u003e\u003e 1; if (!check(mid + 1)) r = mid; else l = mid + 1; } return l; } }; ","date":"2023-03-13","objectID":"/suffix_array/:3:0","tags":["C++","Algorithm"],"title":"[算法刷题]后缀数组Suffix Array","uri":"/suffix_array/"},{"categories":["Golang"],"content":"业务场景 对一些业务进行检查，比如权限检查，审核检查等。 ","date":"2023-02-20","objectID":"/golang_permit_check/:1:0","tags":["Golang"],"title":"[Golang]优雅实现「业务/权限」检查","uri":"/golang_permit_check/"},{"categories":["Golang"],"content":"实现思路 对应权限用“枚举”定义，由于Golang没有枚举，所以用常量和后面的map代替。常量定义如下 const ( PermitZero = 0 PermitOne = 1 PermitTwo = 2 PermitThree = 3 ... ) 定义Check方法，每个Check方法参数一致，返回一致。 type CheckParams struct { p1 string p2 int64 p3 Context ... } func CheckZero(p *CheckParams) error {} func CheckOne(p *CheckParams) error {} func CheckTwo(p *CheckParams) error {} func CheckThree(p *CheckParams) error {} ... 把权限顺序放入列表里，对权限与函数进行map对应 var ( CheckFunc = map[int]func(*CheckParams) error { PermitZero: CheckZero, PermitOne: CheckOne, PermitTwo: CheckTwo, PermitThree: CheckThree, ... } CheckOrder = []int { PermitZero = 0 PermitOne = 1 PermitTwo = 2 PermitThree = 3 ... } ) 业务逻辑编写，遍历CheckOrder，通过位检查权限中是否需要检查当前项目，调用Check函数检查 func IsSet(s uint64, b int) uint64 { return s \u0026 (1 \u003c\u003c b) } for _, index := range CheckOrder { if IsSet(permit, index) != 0 { baseRet := CheckFunc[index](params) if baseRet != nil { log.Error(...) return } } } ","date":"2023-02-20","objectID":"/golang_permit_check/:2:0","tags":["Golang"],"title":"[Golang]优雅实现「业务/权限」检查","uri":"/golang_permit_check/"},{"categories":["Linux"],"content":"创建proxy.sh文件 #!/bin/bash hostip=$(cat /etc/resolv.conf |grep -oP '(?\u003c=nameserver\\ ).*') https_proxy=\"http://${hostip}:7890\" http_proxy=\"http://${hostip}:7890\" function set_proxy() { export http_proxy=\"${http_proxy}\" export https_proxy=\"${https_proxy}\" echo \"env http/https proxy set.\" } function unset_proxy(){ unset http_proxy unset https_proxy echo \"env proxy unset\" } if [ \"$1\" = \"set\" ]; then set_proxy elif [ \"$1\" = \"unset\" ]; then unset_proxy else set_proxy fi 保存之后chmod +x proxy.sh ","date":"2022-11-28","objectID":"/wsl-proxy/:1:0","tags":["linux","proxy"],"title":"[linux]wsl配置使用本地clash代理","uri":"/wsl-proxy/"},{"categories":["Linux"],"content":"使用说明 windows开启clash wsl运行source proxy.sh [set] 开启 wsl运行source proxy.sh unset 关闭 ","date":"2022-11-28","objectID":"/wsl-proxy/:2:0","tags":["linux","proxy"],"title":"[linux]wsl配置使用本地clash代理","uri":"/wsl-proxy/"},{"categories":["Algorithm"],"content":"简介 用于本地测试有二叉树的算法 /** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode() : val(0), left(nullptr), right(nullptr) {} * TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} * TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} * }; */ void trimLeftTrailingSpaces(string \u0026input) { input.erase(input.begin(), find_if(input.begin(), input.end(), [](int ch) { return !isspace(ch); })); } void trimRightTrailingSpaces(string \u0026input) { input.erase(find_if(input.rbegin(), input.rend(), [](int ch) { return !isspace(ch); }).base(), input.end()); } TreeNode* stringToTreeNode(string input) { trimLeftTrailingSpaces(input); trimRightTrailingSpaces(input); input = input.substr(1, input.length() - 2); if (!input.size()) { return nullptr; } string item; stringstream ss; ss.str(input); getline(ss, item, ','); TreeNode* root = new TreeNode(stoi(item)); queue\u003cTreeNode*\u003e nodeQueue; nodeQueue.push(root); while (true) { TreeNode* node = nodeQueue.front(); nodeQueue.pop(); if (!getline(ss, item, ',')) { break; } trimLeftTrailingSpaces(item); if (item != \"null\") { int leftNumber = stoi(item); node-\u003eleft = new TreeNode(leftNumber); nodeQueue.push(node-\u003eleft); } if (!getline(ss, item, ',')) { break; } trimLeftTrailingSpaces(item); if (item != \"null\") { int rightNumber = stoi(item); node-\u003eright = new TreeNode(rightNumber); nodeQueue.push(node-\u003eright); } } return root; } string integerVectorToString(vector\u003cint\u003e list, int length = -1) { if (length == -1) { length = list.size(); } if (length == 0) { return \"[]\"; } string result; for(int index = 0; index \u003c length; index++) { int number = list[index]; result += to_string(number) + \", \"; } return \"[\" + result.substr(0, result.length() - 2) + \"]\"; } ","date":"2022-10-06","objectID":"/string_to_tree/:1:0","tags":["C++","Algorithm"],"title":"[算法刷题]C++输入String生成二叉树","uri":"/string_to_tree/"},{"categories":["C++"],"content":"简介 定义在头文件\u003cqueue\u003e中 priority_queue\u003cType, Container, Functional\u003e template\u003c class T, class Container = std::vector\u003cT\u003e, class Compare = std::less\u003ctypename Container::value_type\u003e class priority_queue; 常用操作： top() empty() size() push() emplace() pop() ","date":"2022-06-25","objectID":"/c-stl-priority_queue/:1:0","tags":["C++","STL"],"title":"[C++]priority_queue使用技巧","uri":"/c-stl-priority_queue/"},{"categories":["C++"],"content":"大、小根堆 对于单一数值类型如int类型： #include \u003cfunctional\u003e // 因为用到了greater\u003cint\u003e和less\u003cint\u003e#include \u003cqueue\u003e // 小顶堆 priority_queue\u003cint, vector\u003cint\u003e, greater\u003cint\u003e\u003e q; // 大顶堆 priority_queue\u003cint, vector\u003cint\u003e, less\u003cint\u003e\u003e q; // 默认大顶堆 priority_queue\u003cint\u003e q; 对于自定义类型，需要指明容器，以及优先级规则，如pair\u003cint, int\u003e类别 typedef pair\u003cint, int\u003e PII; priority_queue\u003cPII, vector\u003cPII\u003e, decltype(\u0026cmp)\u003e q(cmp); // cmp为一个比较函数 Example code: #include \u003ciostream\u003e#include \u003cqueue\u003e using namespace std; typedef pair\u003cint, int\u003e PII; // 假设按照pair的第二个数来进行排序，这样说明是按第二个数升序，是小根堆，没啥好说的，记住就行了。 bool cmp(const PII\u0026 p1, const PII\u0026 p2) { return p1.second \u003e p2.second; } int main() { vector\u003cPII\u003e pairs = {{1, 4}, {2, 9}, {5, 3}, {4, 1}, {3, 6}}; priority_queue\u003cPII, vector\u003cPII\u003e, decltype(\u0026cmp)\u003e q(cmp); // 声明了一个pair的根据第二个数比较的小根堆 for (auto p : pairs) { q.push(p); } while (q.size()) { cout \u003c\u003c q.top().first \u003c\u003c q.top().second \u003c\u003c endl; } return 0; } output: 4 1 5 3 1 4 3 6 2 9 ","date":"2022-06-25","objectID":"/c-stl-priority_queue/:2:0","tags":["C++","STL"],"title":"[C++]priority_queue使用技巧","uri":"/c-stl-priority_queue/"},{"categories":["C++"],"content":"综合案例 #include \u003cfunctional\u003e#include \u003cqueue\u003e#include \u003cvector\u003e#include \u003ciostream\u003e template\u003ctypename T\u003e void print_queue(T q) { // NB: pass by value so the print uses a copy while(!q.empty()) { std::cout \u003c\u003c q.top() \u003c\u003c ' '; q.pop(); } std::cout \u003c\u003c '\\n'; } int main() { const auto data = {1,8,5,6,3,4,0,9,7,2}; // 默认的是大根堆 // 输出结果: 9 8 7 6 5 4 3 2 1 0 std::priority_queue\u003cint\u003e q; for(int n : data) q.push(n); print_queue(q); // 声明了一个小根堆 // 输出结果：0 1 2 3 4 5 6 7 8 9 std::priority_queue\u003cint, std::vector\u003cint\u003e, std::greater\u003cint\u003e\u003e q2(data.begin(), data.end()); print_queue(q2); // 利用lambda表达式来写比较函数 // 按给定规则，小于号说明是个大根堆，根据两个数与1异或之后的大小。 auto cmp = [](int left, int right) { return (left ^ 1) \u003c (right ^ 1); }; std::priority_queue\u003cint, std::vector\u003cint\u003e, decltype(cmp)\u003e q3(cmp); for(int n : data) q3.push(n); print_queue(q3); } output: 9 8 7 6 5 4 3 2 1 0 0 1 2 3 4 5 6 7 8 9 8 9 6 7 4 5 2 3 0 1 ","date":"2022-06-25","objectID":"/c-stl-priority_queue/:3:0","tags":["C++","STL"],"title":"[C++]priority_queue使用技巧","uri":"/c-stl-priority_queue/"},{"categories":["C++"],"content":"总结 默认是大根堆，大的数在顶上 greater\u003cint\u003e是小根堆，less\u003cint\u003e是大根堆。 // greater: constexpr bool operator()(const T \u0026lhs, const T \u0026rhs) const { return lhs \u003e rhs; // assumes that the implementation uses a flat address space } // less: constexpr bool operator()(const T \u0026lhs, const T \u0026rhs) const { return lhs \u003c rhs; // assumes that the implementation uses a flat address space } 自定义比较函数 // 小根堆 bool cmp(const T\u0026 t1, const T\u0026 t2) { t1 \u003e t2; } // 大根堆 bool cmp(const T\u0026 t1, const T\u0026 t2) { t1 \u003c t2; } 自定义比较函数写法priority_queue\u003cT, vector\u003cT\u003e, decltype(\u0026cmp)\u003e q(cmp); ","date":"2022-06-25","objectID":"/c-stl-priority_queue/:4:0","tags":["C++","STL"],"title":"[C++]priority_queue使用技巧","uri":"/c-stl-priority_queue/"},{"categories":["C++"],"content":" 定义在头文件 \u003citerator\u003e ","date":"2022-06-20","objectID":"/advanceprevnext/:0:0","tags":["C++","STL"],"title":"[C++]advance(), prev() and next()","uri":"/advanceprevnext/"},{"categories":["C++"],"content":"std::advance 增加给定的迭代器 it 以 n 个元素的步长。 若 n 为负，则迭代器自减。该情况下， InputIt 必须满足遗留双向迭代器 (LegacyBidirectionalIterator) 的要求，否则行为未定义。 ","date":"2022-06-20","objectID":"/advanceprevnext/:1:0","tags":["C++","STL"],"title":"[C++]advance(), prev() and next()","uri":"/advanceprevnext/"},{"categories":["C++"],"content":"参数 it : 要前进的迭代器 n : it 要前进的元素数 ","date":"2022-06-20","objectID":"/advanceprevnext/:1:1","tags":["C++","STL"],"title":"[C++]advance(), prev() and next()","uri":"/advanceprevnext/"},{"categories":["C++"],"content":"返回值 (无) ","date":"2022-06-20","objectID":"/advanceprevnext/:1:2","tags":["C++","STL"],"title":"[C++]advance(), prev() and next()","uri":"/advanceprevnext/"},{"categories":["C++"],"content":"复杂度 线性。 然而，若 InputIt 额外满足遗留随机访问迭代器 (LegacyRandomAccessIterator) 的要求，则复杂度是常数。 ","date":"2022-06-20","objectID":"/advanceprevnext/:1:3","tags":["C++","STL"],"title":"[C++]advance(), prev() and next()","uri":"/advanceprevnext/"},{"categories":["C++"],"content":"示例 Code: #include \u003ciostream\u003e#include \u003citerator\u003e#include \u003cvector\u003e int main() { std::vector\u003cint\u003e v{ 3, 1, 4 }; auto vi = v.begin(); std::advance(vi, 2); std::cout \u003c\u003c *vi \u003c\u003c ' '; vi = v.end(); std::advance(vi, -2); std::cout \u003c\u003c *vi \u003c\u003c '\\n'; } Output: 4 1 ","date":"2022-06-20","objectID":"/advanceprevnext/:1:4","tags":["C++","STL"],"title":"[C++]advance(), prev() and next()","uri":"/advanceprevnext/"},{"categories":["C++"],"content":"std::prev ","date":"2022-06-20","objectID":"/advanceprevnext/:2:0","tags":["C++","STL"],"title":"[C++]advance(), prev() and next()","uri":"/advanceprevnext/"},{"categories":["C++"],"content":"参数 it : 迭代器 n : it 要被减少的次数 ","date":"2022-06-20","objectID":"/advanceprevnext/:2:1","tags":["C++","STL"],"title":"[C++]advance(), prev() and next()","uri":"/advanceprevnext/"},{"categories":["C++"],"content":"返回值 返回迭代器 it 的第 n 个前驱。 ","date":"2022-06-20","objectID":"/advanceprevnext/:2:2","tags":["C++","STL"],"title":"[C++]advance(), prev() and next()","uri":"/advanceprevnext/"},{"categories":["C++"],"content":"复杂度 线性。 然而，若 BidirIt 还满足遗留随机访问迭代器 (LegacyRandomAccessIterator) 的要求，则复杂度为常数。 ","date":"2022-06-20","objectID":"/advanceprevnext/:2:3","tags":["C++","STL"],"title":"[C++]advance(), prev() and next()","uri":"/advanceprevnext/"},{"categories":["C++"],"content":"示例 Code: #include \u003ciostream\u003e#include \u003citerator\u003e#include \u003cvector\u003e int main() { std::vector\u003cint\u003e v{ 3, 1, 4 }; auto it = v.end(); auto pv = std::prev(it, 2); std::cout \u003c\u003c *pv \u003c\u003c '\\n'; it = v.begin(); pv = std::prev(it, -2); std::cout \u003c\u003c *pv \u003c\u003c '\\n'; } Output: 1 4 ","date":"2022-06-20","objectID":"/advanceprevnext/:2:4","tags":["C++","STL"],"title":"[C++]advance(), prev() and next()","uri":"/advanceprevnext/"},{"categories":["C++"],"content":"std::next ","date":"2022-06-20","objectID":"/advanceprevnext/:3:0","tags":["C++","STL"],"title":"[C++]advance(), prev() and next()","uri":"/advanceprevnext/"},{"categories":["C++"],"content":"参数 it : 迭代器 n : 要前进的元素数 ","date":"2022-06-20","objectID":"/advanceprevnext/:3:1","tags":["C++","STL"],"title":"[C++]advance(), prev() and next()","uri":"/advanceprevnext/"},{"categories":["C++"],"content":"返回值 迭代器 it 的第 n 个后继。 ","date":"2022-06-20","objectID":"/advanceprevnext/:3:2","tags":["C++","STL"],"title":"[C++]advance(), prev() and next()","uri":"/advanceprevnext/"},{"categories":["C++"],"content":"复杂度 线性。 然而，若 InputIt 还满足遗留随机访问迭代器 (LegacyRandomAccessIterator) 的要求，则复杂度为常数。 ","date":"2022-06-20","objectID":"/advanceprevnext/:3:3","tags":["C++","STL"],"title":"[C++]advance(), prev() and next()","uri":"/advanceprevnext/"},{"categories":["C++"],"content":"示例 Code: #include \u003ciostream\u003e#include \u003citerator\u003e#include \u003cvector\u003e int main() { std::vector\u003cint\u003e v{ 4, 5, 6 }; auto it = v.begin(); auto nx = std::next(it, 2); std::cout \u003c\u003c *it \u003c\u003c ' ' \u003c\u003c *nx \u003c\u003c '\\n'; it = v.end(); nx = std::next(it, -2); std::cout \u003c\u003c ' ' \u003c\u003c *nx \u003c\u003c '\\n'; } Output: 4 6 5 ","date":"2022-06-20","objectID":"/advanceprevnext/:3:4","tags":["C++","STL"],"title":"[C++]advance(), prev() and next()","uri":"/advanceprevnext/"},{"categories":["Spring"],"content":"全局代理 在C:\\Users\\用户\\.gradle文件夹下打开或新建gradle.properties 增加内容： # gradle 代理配置 systemProp.socks.proxyHost=xxx systemProp.socks.proxyPort=xxx systemProp.socks.proxyUser=xxx systemProp.socks.proxyPassword=xxx systemProp.http.proxyHost=xxx systemProp.http.proxyPort=xxx systemProp.http.proxyUser=xxx systemProp.http.proxyPassword=xxx systemProp.https.proxyHost=xxx systemProp.https.proxyPort=xxx systemProp.https.proxyUser=xxx systemProp.https.proxyPassword=xxx ","date":"2022-06-17","objectID":"/gradle-proxy/:1:0","tags":["Spring Boot"],"title":"[Java]Gradle设置代理","uri":"/gradle-proxy/"},{"categories":["Spring"],"content":"项目代理 在项目build.gradle同级目录下新建gradle.properties 增加内容： 分别配置socks、http、https的代理IP、代理端口、用户名和密码： # gradle 代理配置 systemProp.socks.proxyHost=xxx systemProp.socks.proxyPort=xxx systemProp.socks.proxyUser=xxx systemProp.socks.proxyPassword=xxx systemProp.http.proxyHost=xxx systemProp.http.proxyPort=xxx systemProp.http.proxyUser=xxx systemProp.http.proxyPassword=xxx systemProp.https.proxyHost=xxx systemProp.https.proxyPort=xxx systemProp.https.proxyUser=xxx systemProp.https.proxyPassword=xxx 例如我用的clash代理，默认socks和http端口均是7890，没有密码,我的配置文件为： systemProp.socks.proxyHost=127.0.0.1 systemProp.socks.proxyPort=7890 systemProp.http.proxyHost=127.0.0.1 systemProp.http.proxyPort=7890 systemProp.https.proxyHost=127.0.0.1 systemProp.https.proxyPort=7890 ","date":"2022-06-17","objectID":"/gradle-proxy/:2:0","tags":["Spring Boot"],"title":"[Java]Gradle设置代理","uri":"/gradle-proxy/"},{"categories":null,"content":"$$ e^{ i \\pi}+1=0 $$ ","date":"2022-05-31","objectID":"/first/:0:0","tags":null,"title":"Hello world.","uri":"/first/"}]